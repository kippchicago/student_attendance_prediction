summarize(avg_rmse = mean(rmse_0))
summarize_rmse
m_tobit <- vglm(year_end ~ cum_enrolled + cum_absent + yearid, tobit(Lower = 0, Upper = 1), data = yca_filtered)
formula_t <- formula(year_end ~ cum_enrolled + cum_absent + yearid)
summary(m_tobit)
holdout_tobit <- function(splits, ...){
model_t <- vglm(...,
tobit(Lower = 0, Upper = 1),
data = splits)
holdout <- assessment(splits)
pred <- predict(object = model_t, newdata = holdout)
holdout$.fitted <- pred[,1]
holdout$.se <- pred[,2]
holdout
}
map_holdout_tobit <- function(data, formula){
data$results <- map(data$splits,
holdout_tobit,
formula)
data$mod_id <- as.character(deparse(formula))
data
}
run_models <- formulas %>%
map(~{map_holdout_tobit(rs_data, .x) %>%
as_tibble()})
calc_rmse <- run_models %>%
map_df(~mutate(.x,
rmse_0 = map2_dbl(results,
results,
~rmse_vec(.x$year_end,
.y$.fitted))))
summarize_rmse <- calc_rmse %>%
group_by(mod_id) %>%
summarize(avg_rmse = mean(rmse_0))
summarize_rmse
holdout_model_spec <- function(splits, model_type, formula, ...){
if(tolower(model_type) == "linear"){
model_spec <- linear_reg() %>%
set_engine("lm")
model <- model_spec %>%
fit(formula,
data = as.data.frame(splits)) #parsnip wants df
}
if(tolower(model_type) == "logistic"){
model_spec <- parsnip::logistic_reg() %>%
parsnip::set_engine("glm")
model <- model_spec %>%
fit(formula,
data = as.data.frame(splits))
}
##Requires additional set of variables: mtry, ntrees
# if(tolower(model_type) == "random_forest"){
#   model_spec <- rand_forest() %>%
#     set_engine("rand_forest")
#   model <- model_spec %>%
#     fit(...,
#         data = splits)
#
# }
if(tolower(model_type) == "knn") {
model_spec <- nearest_neighbor(mode = "regression", ...) %>%
set_engine("kknn")
model <- model_spec %>%
fit(formula, data = as.data.frame(splits))
}
holdout <- assessment(splits)
if(model_type == "knn") {
predictions <- predict(model, new_data = holdout) #won't work with parsnip models
res <- bind_cols(holdout, predictions) %>%
rename(.fitted = .pred) %>%
mutate(.se.fit = as.numeric(NA)) # can't seem to figure out this calcualtion KNN
args <- list(...)
model_type <- sprintf("%s %s", model_type, args$neighbors)
} else {
res <- broom::augment(model$fit, newdata = holdout) #won't work with parsnip models
}
# Convert log-odds to probability measure
if(tolower(model_type) == "logistic") {
res <- res %>% mutate(.fitted = exp(.fitted)/(1+exp(.fitted)))
}
res <- res %>% mutate(model = deparse(formula),
model_type = model_type)
splits$results <- res
}
holdout_model_spec(rs_data$splits[[1]], "linear", formula_0) #works!
holdout_model_spec(rs_data$splits[[1]], "logistic", formula_0)
holdout_model_spec <- function(splits, model_type, formula, ...){
if(tolower(model_type) == "linear"){
model_spec <- linear_reg() %>%
set_engine("lm")
model <- model_spec %>%
fit(formula,
data = as.data.frame(splits)) #parsnip wants df
}
if(tolower(model_type) == "logistic"){
model_spec <- parsnip::logistic_reg() %>%
parsnip::set_engine("glm")
model <- model_spec %>%
fit(formula,
data = as.data.frame(splits))
}
##Requires additional set of variables: mtry, ntrees
# if(tolower(model_type) == "random_forest"){
#   model_spec <- rand_forest() %>%
#     set_engine("rand_forest")
#   model <- model_spec %>%
#     fit(...,
#         data = splits)
#
# }
if(tolower(model_type) == "knn") {
model_spec <- nearest_neighbor(mode = "regression", ...) %>%
set_engine("kknn")
model <- model_spec %>%
fit(formula, data = as.data.frame(splits))
}
holdout <- assessment(splits)
if(model_type == "knn") {
predictions <- predict(model, new_data = holdout) #won't work with parsnip models
res <- bind_cols(holdout, predictions) %>%
rename(.fitted = .pred) %>%
mutate(.se.fit = as.numeric(NA)) # can't seem to figure out this calcualtion KNN
args <- list(...)
model_type <- sprintf("%s %s", model_type, args$neighbors)
} else {
res <- broom::augment(model$fit, newdata = holdout) #won't work with parsnip models
}
# Convert log-odds to probability measure
if(tolower(model_type) == "logistic") {
res <- res %>% mutate(.fitted = exp(.fitted)/(1+exp(.fitted)))
}
res <- res %>% mutate(model = deparse(formula),
model_type = model_type)
splits$results <- res
}
holdout_model_spec(rs_data$splits[[1]], "linear", formula_0) #works!
holdout_model_spec(rs_data$splits[[1]], "logistic", formula_0)
holdout_model_spec(rs_data$splits[[1]], "linear", formula_0) #works!
x<-holdout_model_spec(rs_data$splits[[1]], "knn", formula_0, neighbors = 5)
x
holdout_model_splits <- function(data, type, formula, ...){
out <-data$splits %>%
map(holdout_model_spec, type, formula, ...)
out
}
x<-holdout_model_splits(rs_data, "linear", formula_0)
x$`1`
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
attendance <-
get_powerschool("attendance") %>%
collect()
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
sy <- silounloadr::calc_academic_year(ymd("2020-06-07"), format = "firstyear")
ps_sy_termid <-
silounloadr::calc_ps_termid(sy) %>%
str_extract("\\d{2}") %>%
as.integer()
attendance <-
get_powerschool("attendance") %>%
collect()
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
options(gargle_oauth_email = "mberrien@kippchicago.org")
sy <- silounloadr::calc_academic_year(ymd("2020-06-07"), format = "firstyear")
ps_sy_termid <-
silounloadr::calc_ps_termid(sy) %>%
str_extract("\\d{2}") %>%
as.integer()
attendance <-
get_powerschool("attendance") %>%
collect()
attendance <-
get_powerschool("attendance") %>%
collect()
attendance <-
get_powerschool("attendance") %>%
collect()
library(ProjectTemplate)
load.project()
attendance <-
get_powerschool("attendance") %>%
collect()
# attendance <-
#   get_powerschool("attendance") %>%
#   collect()
attendance <-
get_powerschool("attendance") %>%
filter(yearid >= 25,
att_mode_code == "ATT_ModeDaily") %>%
collect()
# attendance <-
#   get_powerschool("attendance") %>%
#   collect()
attendance <-
silounloadr::get_powerschool("attendance") %>%
filter(yearid >= 25,
att_mode_code == "ATT_ModeDaily") %>%
collect()
attendance <-
get_powerschool("attendance") %>%
collect()
options(gargle_oauth_email = "mberrien@kippchicago.org")
attendance <-
get_powerschool("attendance") %>%
collect()
bigrquery::set_service_token("kipp-chicago-silo-2-aa786970aefd.json")
options()
attendance <-
get_powerschool("attendance") %>%
collect()
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
bigrquery::set_service_token("kipp-chicago-silo-2-aa786970aefd.json")
sy <- silounloadr::calc_academic_year(ymd("2020-06-07"), format = "firstyear")
ps_sy_termid <-
silounloadr::calc_ps_termid(sy) %>%
str_extract("\\d{2}") %>%
as.integer()
attendance <-
get_powerschool("attendance") %>%
collect()
bigrquery::set_service_token("kipp-chicago-silo-2-aa786970aefd.json")
attendance <-
get_powerschool("attendance") %>%
collect()
rm(list = ls())
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
bigrquery::set_service_token("kipp-chicago-silo-2-aa786970aefd.json")
options(gargle_oauth_email = "mberrien@kippchicago.org")
rm(list = ls())
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
options(gargle_oauth_email = "mberrien@kippchicago.org")
bigrquery::set_service_token("kipp-chicago-silo-2-aa786970aefd.json")
library(tidyverse)
library(silounloadr)
library(janitor)
library(lubridate)
options(gargle_oauth_email = "mberrien@kippchicago.org")
bigrquery::bq_auth(path = "kipp-chicago-silo-2-aa786970aefd.json")
attendance <-
get_powerschool("attendance") %>%
collect()
head(attendance)
head(attendance)
head(attendance)
attendance_code <-
get_powerschool("attendance_code") %>%
mutate(att_code = if_else(att_code == "true", "T", att_code)) %>%
collect()
membership <-
get_powerschool("ps_membership_reg") %>%
collect()
membership <-
get_powerschool("ps_membership_reg") %>%
select(studentid,
schoolid,
date = calendardate,
enrolled = studentmembership,
grade_level,
attendance = ATT_CalcCntPresentAbsent,
yearid) %>%
collect()
membership <-
get_powerschool("ps_membership_reg") %>%
select(studentid,
schoolid,
date = calendardate,
membership = studentmembership,
grade_level,
attendance = ATT_CalcCntPresentAbsent,
yearid) %>%
collect()
students <-
get_powerschool("students") %>%
collect()
students <-
get_powerschool("students") %>%
select(studentid = id,
student_number,
dob,
enrollment_schoolid,
enrollmentcode,
ethnicity,
schoolentrygradelevel,
street,
zip,
gender,
entrydate,
schoolentrydate,
districtentrydate,
geocode) %>%
collect()
View(students)
students <-
get_powerschool("students") %>%
select(studentid = id,
student_number,
lastfirst,
dob,
enrollment_schoolid,
enrollmentcode,
ethnicity,
schoolentrygradelevel,
street,
zip,
mailing_zip,
mailing_street,
gender,
entrydate,
schoolentrydate,
districtentrydate,
geocode) %>%
collect()
students <-
get_powerschool("students") %>%
select(studentid = id,
student_number,
lastfirst,
dob,
enrollment_schoolid,
enrollmentcode,
ethnicity,
schoolentrygradelevel,
street,
city,
state,
zip,
gender,
entrydate,
schoolentrydate,
districtentrydate,
geocode) %>%
collect()
students <-
get_powerschool("students") %>%
select(studentid = id,
student_number,
lastfirst,
grade_level,
dob,
gender,
ethnicity,
enrollment_schoolid,
enrollmentcode,
street,
city,
state,
zip,
geocode,
entrydate,
schoolentrydate,
schoolentrygradelevel) %>%
collect()
students <-
get_powerschool("students") %>%
select(studentid = id,
student_number,
lastfirst,
grade_level,
dob,
gender,
ethnicity,
enrollment_schoolid,
street,
city,
state,
zip,
geocode,
entrydate,
schoolentrydate,
schoolentrygradelevel) %>%
collect()
View(students)
View(students)
students %>%
filter(street=="")
students %>%
filter(street=="") %>%
View()
View(students)
View(attendance)
attendance <-
get_powerschool("attendance") %>%
filter(att_mode_code == "ATT_ModeDaily") %>%
collect()
colnames(attendance)
attendance <-
get_powerschool("attendance") %>%
filter(att_mode_code == "ATT_ModeDaily") %>%
select(ada_value_code,
ada_value_time,
adm_value,
att_date,
att_flags,
att_interval,
att_mode_code,
attendance_codeid,
calendar_dayid,
ccid,
dcid,
id,
ip_address,
lock_reporting_yn,
lock_teacher_yn,
parent_attendanceid,
periodid,
programid,
schoolid,
studentid,
total_minutes,
whomodifiedid,
whomodifiedtype,
yearid) %>%
collect()
View(attendance)
attendance %>%
select(ada_value_code) %>%
distinct() %>%
View()
attendance %>%
select(ada_value_time) %>%
distinct() %>%
View()
attendance %>%
select(adm_value) %>%
distinct() %>%
View()
attendance %>%
select(att_date) %>%
distinct() %>%
View()
attendance %>%
select(att_flags) %>%
distinct() %>%
View()
attendance %>%
select(att_interval) %>%
distinct() %>%
View()
attendance %>%
select(att_mode_code) %>%
distinct() %>%
View()
attendance %>%
select(attendance_codeid) %>%
distinct() %>%
View()
attendance %>%
select(calendar_dayid) %>%
distinct() %>%
View()
attendance %>%
select(ccid) %>%
distinct() %>%
View()
attendance %>%
select(dcid) %>%
distinct() %>%
View()
attendance %>%
select(id) %>%
distinct() %>%
View()
attendance %>%
select(ip_address) %>%
distinct() %>%
View()
attendance %>%
select(lock_reporting_yn) %>%
distinct() %>%
View()
attendance %>%
select(lock_teacher_yn) %>%
distinct() %>%
View()
attendance %>%
select(parent_attendanceid) %>%
distinct() %>%
View()
attendance %>%
select(periodid) %>%
distinct() %>%
View()
attendance %>%
select(programid) %>%
distinct() %>%
View()
attendance <-
get_powerschool("attendance") %>%
filter(att_mode_code == "ATT_ModeDaily") %>%
collect()
View(membership)
